# wordpress.conf
#
# Contains a common configuration for use by nginx on a WordPress
# installation. This file should be included in any WordPress site
# nginx config with the following line:
#
#   include      /etc/nginx/wordpress.conf;
#
# See local-nginx-example.conf-sample for a full example
location / {
  index index.php;
  try_files $uri $uri/ /index.php?$args;
}

# Workaround to fix post previews.
# Preview pages check the active blog against the DB, and roots overrides those options.
# This results in a failed check at a WP level and 404 pages. This is really Wordpress' fault.
if ($query_string ~* "preview_id=") {
  rewrite ^(.*)/?$ /wp/?pagename=$1&$args break;
}
if ($query_string ~* "preview=true") {
  rewrite ^(.*)$ /wp/$1 break;
}

# Add trailing slash to */wp-admin requests
rewrite /wp-admin$ $scheme://$host$uri/ permanent;

# Handle all static assets by serving the file directly. Add directives
# to send expires headers and turn off 404 error logging.
location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
  expires <%= node['wordpress_nginx']['static_file_expiry'] %>;
  log_not_found off;
}

# Prevent hidden files (beginning with a period) from being served
location ~ /\. {
  access_log off;
  log_not_found off;
  deny all;
}

# Pass uploaded files to wp-includes/ms-files.php
rewrite /files/$ /index.php last;

if ($uri !~ wp-content/plugins) {
  rewrite /files/(.+)$ /wp-includes/ms-files.php?file=$1 last;
}

# Rewrite multisite in a subdirectory '.../wp-.*' and '.../*.php'
if (!-e $request_filename) {
  rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
  rewrite ^/[_0-9a-zA-Z-]+.*(/wp-admin/.*\.php)$ $1 last;
  rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
}

location ~ \.php$ {
  <% if node['nginx']['client_max_body_size'] -%>
  client_max_body_size <%= node['nginx']['client_max_body_size'] %>;
  <% end -%>
  try_files $uri =404;

  # Include the fastcgi_params defaults provided by nginx
  include /etc/nginx/fastcgi_params;
  fastcgi_read_timeout <%= node['wordpress_nginx']['fastcgi_read_timeout'] %>;

  # SCRIPT_FILENAME is a required parameter for things to work properly,
  # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
  # We define it here to be sure that it exists.
  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

  # Use the upstream for php5-fpm that we defined in nginx.conf
  fastcgi_pass unix:<%= node['wordpress_nginx']['php_fpm']['listen'] %>;

  # And get to serving the file!
  fastcgi_index index.php;
}
